// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: internal/rpc/autovpn.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AutoVPNClient is the client API for AutoVPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoVPNClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (AutoVPN_ApplyClient, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Undo(ctx context.Context, in *UndoRequest, opts ...grpc.CallOption) (AutoVPN_UndoClient, error)
}

type autoVPNClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoVPNClient(cc grpc.ClientConnInterface) AutoVPNClient {
	return &autoVPNClient{cc}
}

func (c *autoVPNClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (AutoVPN_ApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &AutoVPN_ServiceDesc.Streams[0], "/AutoVPN/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoVPNApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoVPN_ApplyClient interface {
	Recv() (*ApplyResponse, error)
	grpc.ClientStream
}

type autoVPNApplyClient struct {
	grpc.ClientStream
}

func (x *autoVPNApplyClient) Recv() (*ApplyResponse, error) {
	m := new(ApplyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *autoVPNClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/AutoVPN/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoVPNClient) Undo(ctx context.Context, in *UndoRequest, opts ...grpc.CallOption) (AutoVPN_UndoClient, error) {
	stream, err := c.cc.NewStream(ctx, &AutoVPN_ServiceDesc.Streams[1], "/AutoVPN/Undo", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoVPNUndoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoVPN_UndoClient interface {
	Recv() (*UndoResponse, error)
	grpc.ClientStream
}

type autoVPNUndoClient struct {
	grpc.ClientStream
}

func (x *autoVPNUndoClient) Recv() (*UndoResponse, error) {
	m := new(UndoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AutoVPNServer is the server API for AutoVPN service.
// All implementations must embed UnimplementedAutoVPNServer
// for forward compatibility
type AutoVPNServer interface {
	Apply(*ApplyRequest, AutoVPN_ApplyServer) error
	List(context.Context, *ListRequest) (*ListResponse, error)
	Undo(*UndoRequest, AutoVPN_UndoServer) error
	mustEmbedUnimplementedAutoVPNServer()
}

// UnimplementedAutoVPNServer must be embedded to have forward compatible implementations.
type UnimplementedAutoVPNServer struct {
}

func (UnimplementedAutoVPNServer) Apply(*ApplyRequest, AutoVPN_ApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedAutoVPNServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAutoVPNServer) Undo(*UndoRequest, AutoVPN_UndoServer) error {
	return status.Errorf(codes.Unimplemented, "method Undo not implemented")
}
func (UnimplementedAutoVPNServer) mustEmbedUnimplementedAutoVPNServer() {}

// UnsafeAutoVPNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoVPNServer will
// result in compilation errors.
type UnsafeAutoVPNServer interface {
	mustEmbedUnimplementedAutoVPNServer()
}

func RegisterAutoVPNServer(s grpc.ServiceRegistrar, srv AutoVPNServer) {
	s.RegisterService(&AutoVPN_ServiceDesc, srv)
}

func _AutoVPN_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoVPNServer).Apply(m, &autoVPNApplyServer{stream})
}

type AutoVPN_ApplyServer interface {
	Send(*ApplyResponse) error
	grpc.ServerStream
}

type autoVPNApplyServer struct {
	grpc.ServerStream
}

func (x *autoVPNApplyServer) Send(m *ApplyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AutoVPN_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoVPNServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutoVPN/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoVPNServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoVPN_Undo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UndoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoVPNServer).Undo(m, &autoVPNUndoServer{stream})
}

type AutoVPN_UndoServer interface {
	Send(*UndoResponse) error
	grpc.ServerStream
}

type autoVPNUndoServer struct {
	grpc.ServerStream
}

func (x *autoVPNUndoServer) Send(m *UndoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AutoVPN_ServiceDesc is the grpc.ServiceDesc for AutoVPN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoVPN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AutoVPN",
	HandlerType: (*AutoVPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AutoVPN_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _AutoVPN_Apply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Undo",
			Handler:       _AutoVPN_Undo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/rpc/autovpn.proto",
}
